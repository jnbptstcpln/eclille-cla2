# Generated by Django 3.2.4 on 2022-01-20 21:08

import cla_reservation.models.barbecue
import cla_reservation.models.foyer
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_summernote.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('cla_event', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BarbecueRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('description', django_summernote.fields.SummernoteTextField(help_text='Rappelle des éléments important tel que les différents chèques de cautions', verbose_name='Présentation')),
                ('file', models.FileField(blank=True, help_text='De préférence au format PDF ou Excel', null=True, upload_to=cla_reservation.models.barbecue.FilePath.rules, verbose_name='Fichier')),
                ('available', models.BooleanField(default=False, verbose_name='Cette version est disponible à la consultation')),
            ],
            options={
                'verbose_name': '[BARBECUE] Charte du foyer',
                'verbose_name_plural': '[BARBECUE] Chartes du foyer',
                'ordering': ('-created_on',),
            },
        ),
        migrations.CreateModel(
            name='BeerMenu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(blank=True, help_text='De préférence au format PDF ou Excel', null=True, upload_to=cla_reservation.models.foyer.FilePath.beer_menu, verbose_name='Fichier')),
                ('available', models.BooleanField(default=False, verbose_name='Cette version est disponible à la consultation')),
            ],
            options={
                'verbose_name': '[FOYER] Carte des bières',
                'verbose_name_plural': '[FOYER] Cartes des bières',
                'ordering': ('-created_on',),
            },
        ),
        migrations.CreateModel(
            name='FoyerItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nom')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='Description rapide')),
                ('available', models.BooleanField(default=True, verbose_name='Disponible à la sélection dans les réservations')),
                ('deposit', models.PositiveIntegerField(blank=True, default=None, help_text='Laisser vide si pas de caution pour cet équipement', null=True)),
            ],
            options={
                'verbose_name': '[FOYER] Équipement supplémentaire',
                'verbose_name_plural': '[FOYER] Équipements supplémentaires',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FoyerRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('description', django_summernote.fields.SummernoteTextField(help_text='Rappelle des éléments important tel que les différents chèques de cautions', verbose_name='Présentation')),
                ('file', models.FileField(blank=True, help_text='De préférence au format PDF ou Excel', null=True, upload_to=cla_reservation.models.foyer.FilePath.rules, verbose_name='Fichier')),
                ('available', models.BooleanField(default=False, verbose_name='Cette version est disponible à la consultation')),
            ],
            options={
                'verbose_name': '[FOYER] Charte du foyer',
                'verbose_name_plural': '[FOYER] Chartes du foyer',
                'ordering': ('-created_on',),
            },
        ),
        migrations.CreateModel(
            name='SportActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nom')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='Description rapide')),
                ('available', models.BooleanField(default=True, verbose_name='Disponible à la sélection dans les réservations')),
            ],
            options={
                'verbose_name': '[SYNTHE] Sport ou activité',
                'verbose_name_plural': '[SYNTHE] Sports ou activités',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ReservationSynthe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description_event', django_summernote.fields.SummernoteTextField(blank=True, help_text='Précisez ici comment va être organisé votre événement, quelles activités seront proposées et quels seront vos besoins (électrique, équipements particulier, ...)', null=True, verbose_name="Description de l'événement")),
                ('start_date', models.DateField(help_text='Indiquez ici la date à partir de laquelle vous souhaitez occuper le lieu', verbose_name='Date de début')),
                ('start_time', models.TimeField(help_text='Au format HH:MM (par exemple 18:30)', verbose_name='Heure de début')),
                ('end_time', models.TimeField(help_text='Au format HH:MM (par exemple 01:00), elle correspond au moment où vous devez avoir rangé et nettoyé le lieu', verbose_name='Heure de fin')),
                ('multiple_days', models.BooleanField(default=False, help_text="Lors de la validation la durée totale d'occupation (installation et rangement) sera bien indiqué sur plusieurs jours", verbose_name="L'événement se déroule sur plusieurs jours")),
                ('manually_set_datetime', models.BooleanField(default=False, verbose_name='Définir manuellement les dates et horaires de début et de fin')),
                ('starts_on', models.DateTimeField(help_text='Calculée automatiquement sauf si la case précédente est cochée', verbose_name="Date et heure du début d'occupation")),
                ('ends_on', models.DateTimeField(help_text='Calculée automatiquement sauf si la case précédente est cochée', verbose_name="Date et heure de fin d'occupation")),
                ('sent', models.BooleanField(default=False, verbose_name='Envoyé')),
                ('sent_on', models.DateTimeField(default=None, editable=False, null=True, verbose_name='Envoyé le')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('validated', models.BooleanField(default=False, verbose_name="L'événement est validé et apparait sur le planning étudiant")),
                ('validated_on', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Validé le')),
                ('admin_display', models.BooleanField(default=False, verbose_name="L'événement apparait sur le planning de l'administration")),
                ('member_display', models.BooleanField(default=True, verbose_name="L'événement apparait sur le planning des cotisants")),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('event', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservation_synthe', to='cla_event.event', verbose_name='Réserver dans le cadre de cet événement')),
                ('sport_activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='cla_reservation.sportactivity', verbose_name='Sport ou activité')),
                ('user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Réserver à titre personnel par ce cotisant')),
                ('validated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Validé par')),
            ],
            options={
                'verbose_name': '[SYNTHE] Réservation',
                'verbose_name_plural': '[SYNTHE] Réservations',
                'ordering': ('-starts_on',),
            },
        ),
        migrations.CreateModel(
            name='ReservationFoyer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', django_summernote.fields.SummernoteTextField(help_text='Précisez ici comment va être organisé votre événement, quelles activités seront proposées et quels seront vos besoins (électrique, équipements particulier, ...)', verbose_name="Description de l'événement")),
                ('beer_selection', models.TextField(blank=True, help_text='Indiquez sur chaque ligne "NOM DE LA BIERE : QUANTITE"', max_length=500, verbose_name='Sélection de bière')),
                ('start_date', models.DateField(help_text="Indiquez ici la date à partir de laquelle vous souhaitez occuper le lieu pour l'installation", verbose_name="Date de début de l'installation")),
                ('start_time', models.TimeField(help_text='Au format HH:MM (par exemple 18:30)', verbose_name="Heure de début de l'installation")),
                ('end_time', models.TimeField(help_text='Au format HH:MM (par exemple 01:00), elle correspond au moment où vous devez avoir rangé et nettoyé le lieu', verbose_name='Heure de fin du rangement')),
                ('multiple_days', models.BooleanField(default=False, help_text="Lors de la validation la durée totale d'occupation (installation et rangement) sera bien indiqué sur plusieurs jours", verbose_name="L'événement se déroule sur plusieurs jours")),
                ('manually_set_datetime', models.BooleanField(default=False, verbose_name='Définir manuellement les dates et horaires de début et de fin')),
                ('starts_on', models.DateTimeField(help_text='Calculée automatiquement sauf si la case précédente est cochée', verbose_name="Date et heure du début d'occupation")),
                ('ends_on', models.DateTimeField(help_text='Calculée automatiquement sauf si la case précédente est cochée', verbose_name="Date et heure de fin d'occupation")),
                ('sent', models.BooleanField(default=False, verbose_name='Envoyé')),
                ('sent_on', models.DateTimeField(default=None, editable=False, null=True, verbose_name='Envoyé le')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('validated', models.BooleanField(default=False, verbose_name="L'événement est validé et apparait sur le planning étudiant")),
                ('validated_on', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Validé le')),
                ('admin_display', models.BooleanField(default=False, verbose_name="L'événement apparait sur le planning de l'administration")),
                ('member_display', models.BooleanField(default=True, verbose_name="L'événement apparait sur le planning des cotisants")),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('event', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservation_foyer', to='cla_event.event', verbose_name='Réserver dans le cadre de cet événement')),
                ('items', models.ManyToManyField(blank=True, to='cla_reservation.FoyerItem', verbose_name='Équipements supplémentaires')),
                ('user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Réserver à titre personnel par ce cotisant')),
                ('validated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Validé par')),
            ],
            options={
                'verbose_name': '[FOYER] Réservation',
                'verbose_name_plural': '[FOYER] Réservation',
                'ordering': ('-starts_on',),
            },
        ),
        migrations.CreateModel(
            name='ReservationBarbecue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description_event', django_summernote.fields.SummernoteTextField(help_text='Précisez ici comment va être organisé votre événement, quelles activités seront proposées et quels seront vos besoins (électrique, équipements particulier, ...)', verbose_name="Description de l'événement")),
                ('description_user', django_summernote.fields.SummernoteTextField(help_text='Précisez ici dans quel cadre est organisée cette réservation et le nombre de personnes participantes', verbose_name="Description de l'événement")),
                ('start_date', models.DateField(help_text="Indiquez ici la date à partir de laquelle vous souhaitez occuper le lieu pour l'installation", verbose_name="Date de début de l'installation")),
                ('start_time', models.TimeField(help_text='Au format HH:MM (par exemple 18:30)', verbose_name="Heure de début de l'installation")),
                ('end_time', models.TimeField(help_text='Au format HH:MM (par exemple 01:00), elle correspond au moment où vous devez avoir rangé et nettoyé le lieu', verbose_name='Heure de fin du rangement')),
                ('multiple_days', models.BooleanField(default=False, help_text="Lors de la validation la durée totale d'occupation (installation et rangement) sera bien indiqué sur plusieurs jours", verbose_name="L'événement se déroule sur plusieurs jours")),
                ('manually_set_datetime', models.BooleanField(default=False, verbose_name='Définir manuellement les dates et horaires de début et de fin')),
                ('starts_on', models.DateTimeField(help_text='Calculée automatiquement sauf si la case précédente est cochée', verbose_name="Date et heure du début d'occupation")),
                ('ends_on', models.DateTimeField(help_text='Calculée automatiquement sauf si la case précédente est cochée', verbose_name="Date et heure de fin d'occupation")),
                ('sent', models.BooleanField(default=False, verbose_name='Envoyé')),
                ('sent_on', models.DateTimeField(default=None, editable=False, null=True, verbose_name='Envoyé le')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('validated', models.BooleanField(default=False, verbose_name="L'événement est validé et apparait sur le planning étudiant")),
                ('validated_on', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Validé le')),
                ('admin_display', models.BooleanField(default=False, verbose_name="L'événement apparait sur le planning de l'administration")),
                ('member_display', models.BooleanField(default=True, verbose_name="L'événement apparait sur le planning des cotisants")),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('event', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservation_barbecue', to='cla_event.event', verbose_name='Réserver dans le cadre de cet événement')),
                ('user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Réserver à titre personnel par ce cotisant')),
                ('validated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Validé par')),
            ],
            options={
                'verbose_name': '[BARBECUE] Réservation',
                'verbose_name_plural': '[BARBECUE] Réservations',
                'ordering': ('-starts_on',),
            },
        ),
    ]
