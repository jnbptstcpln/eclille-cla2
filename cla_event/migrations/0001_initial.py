# Generated by Django 3.2.4 on 2022-01-20 18:31

import cla_event.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_resized.forms
import django_summernote.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('cla_association', '0006_alter_associationlink__type'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventPlace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nom')),
                ('description', models.CharField(max_length=255, verbose_name='Description')),
                ('available', models.BooleanField(default=True, help_text="Permet de restreindre l'accès de ce type d'événement aux seuls administrateurs", verbose_name='Disponible au choix')),
            ],
            options={
                'verbose_name': 'Lieu',
                'verbose_name_plural': 'Lieux',
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nom')),
                ('description', models.CharField(max_length=255, verbose_name='Description')),
                ('available', models.BooleanField(default=True, help_text="Permet de restreindre l'accès de ce type d'événement aux seuls administrateurs", verbose_name='Disponible au choix')),
            ],
            options={
                'verbose_name': 'Type',
                'verbose_name_plural': 'Types',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('name_school', models.CharField(max_length=100, verbose_name='Nom "admin compatible"')),
                ('presentation_html', django_summernote.fields.SummernoteTextField(blank=True, verbose_name="Présentation de l'événement")),
                ('start_date', models.DateField(verbose_name='Date')),
                ('start_time', models.TimeField(help_text='Au format HH:MM (par exemple 20:00)', verbose_name='Heure de début')),
                ('end_time', models.TimeField(help_text="Au format HH:MM (par exemple 00:00), si l'heure de fin est inférieure à l'heure de début, cette dernière sera considérée comme étant le lendemain", verbose_name='Heure de fin')),
                ('multiple_days', models.BooleanField(default=False, help_text="Lors de la validation l'événement sera bien indiqué sur plusieurs jours", verbose_name="L'événement se déroule sur plusieurs jours")),
                ('manually_set_datetime', models.BooleanField(default=False, verbose_name='Définir manuellement les dates et horaires de début et de fin')),
                ('starts_on', models.DateTimeField(help_text='Calculée automatiquement sauf si la case précédente est cochée', verbose_name='Date et heure de début')),
                ('ends_on', models.DateTimeField(help_text='Calculée automatiquement sauf si la case précédente est cochée', verbose_name='Date et heure de fin')),
                ('poster', django_resized.forms.ResizedImageField(blank=True, crop=None, force_format='PNG', help_text='Au format A4 (827px*1170px)', keep_meta=True, null=True, quality=0, size=[827, 1170], upload_to=cla_event.models.FilePath.event_poster, verbose_name="Affiche de l'événement")),
                ('sent', models.BooleanField(default=False, verbose_name='Envoyé')),
                ('sent_on', models.DateTimeField(default=None, editable=False, null=True, verbose_name='Envoyé le')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('validated', models.BooleanField(default=False, verbose_name="L'événement est validé et apparait sur le planning étudiant")),
                ('validated_on', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Validé le')),
                ('admin_display', models.BooleanField(default=False, verbose_name="L'événement apparait sur le planning envoyé à l'administration")),
                ('association', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='events', to='cla_association.association', verbose_name='Association organisatrice')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='events', to='cla_event.eventplace', verbose_name='Lieu')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='events', to='cla_event.eventtype', verbose_name='Type')),
                ('validated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Validé par')),
            ],
            options={
                'verbose_name': 'Événement',
                'verbose_name_plural': 'Événement',
                'ordering': ('-starts_on',),
            },
        ),
    ]
